apiVersion: v1
kind: ServiceAccount
metadata:
  name: drone-user
  namespace: drone-system
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: drone-system
  name: drone-user
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  verbs:
  - get
  - create
  - delete
  - list
  - watch
  - update
- apiGroups:
  - "batch"
  resources:
  - jobs
  verbs:
  - get
  - create
  - delete
  - list
  - watch
  - update

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: drone-user
  namespace: drone-system
subjects:
- kind: ServiceAccount
  name: drone-user
  namespace: drone-system
roleRef:
  kind: Role
  name: drone-user
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: drone-cluster-user
  namespace: drone-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: drone-system
  name: drone-cluster-user
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  - namespaces
  - pods
  - pods/log
  verbs:
  - get
  - create
  - delete
  - list
  - watch
  - update
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: drone-cluster-user
  namespace: drone-system
subjects:
- kind: ServiceAccount
  name: drone-cluster-user
  namespace: drone-system
roleRef:
  kind: ClusterRole
  name: drone-cluster-user
  apiGroup: rbac.authorization.k8s.io
---
# Source: drone/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: drone-server
  labels:
    release: drone-server
    helm.sh/chart: drone-0.2.5
    app.kubernetes.io/name: drone
    app.kubernetes.io/instance: drone-server
    app.kubernetes.io/component: server
    app.kubernetes.io/version: "2.12"
    app.kubernetes.io/managed-by: Helm
data:
  
  DRONE_DATABASE_DATASOURCE: "root:302@Segma@tcp(mysql:3306)/drone?parseTime=true"
  DRONE_DATABASE_DRIVER: "mysql"
  DRONE_GITLAB_CLIENT_ID: "ab02471e9d8a5c0f11d0bf5d18c7c9af2d5c2be94e2fc4f1b527bce26818d241"
  DRONE_GITLAB_CLIENT_SECRET: "d7faaa6195b8779f3efc94b8d6d29c31d689d0497d2c1996eeef2f8f334f0483"
  DRONE_GITLAB_SERVER: "https://git.cisdigital.cn"
  DRONE_GIT_ALWAYS_AUTH: "false"
  DRONE_KUBERNETES_ENABLED: "true"
  DRONE_KUBERNETES_IMAGE: "harbor.local.segma.tech/drone/controller:1.6.2-20220530"
  DRONE_KUBERNETES_NAMESPACE: "drone-system"
  DRONE_KUBERNETES_SERVICE_ACCOUNT: "drone-cluster-user"
  DRONE_RPC_HOST: "drone-server.drone-system:80"
  DRONE_RPC_PROTO: "http"
  DRONE_RPC_SECRET: "123a00e97c522b4316455f2ae"
  DRONE_RUNNER_PRIVILEGED_IMAGES: "harbor.local.segma.tech/drone/plugins/docker:19.03.8"
  DRONE_SERVER_HOST: "drone.local.segma.tech"
  DRONE_SERVER_PORT: ":80"
  DRONE_SERVER_PROTO: "http"
---
# Source: drone/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    release: drone-server
    helm.sh/chart: drone-0.2.5
    app.kubernetes.io/name: drone
    app.kubernetes.io/instance: drone-server
    app.kubernetes.io/component: server
    app.kubernetes.io/version: "2.12"
    app.kubernetes.io/managed-by: Helm
  name: drone-server
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "8Gi"
---
# Source: drone/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: drone-server
  labels:
    release: drone-server
    helm.sh/chart: drone-0.2.5
    app.kubernetes.io/name: drone
    app.kubernetes.io/instance: drone-server
    app.kubernetes.io/component: server
    app.kubernetes.io/version: "2.12"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: drone
    app.kubernetes.io/instance: drone-server
    app.kubernetes.io/component: server
---
# Source: drone/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: drone-server
  labels:
    release: drone-server
    helm.sh/chart: drone-0.2.5
    app.kubernetes.io/name: drone
    app.kubernetes.io/instance: drone-server
    app.kubernetes.io/component: server
    app.kubernetes.io/version: "2.12"
    app.kubernetes.io/managed-by: Helm
spec:
  
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: drone
      app.kubernetes.io/instance: drone-server
      app.kubernetes.io/component: server
  strategy:
        {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: drone
        app.kubernetes.io/instance: drone-server
        app.kubernetes.io/component: server
      annotations:
        checksum/secrets: 7f760e00f5758654298bef3edba50763f950f4fcde3221f733589d66b1d8435b
    spec:
      serviceAccount: drone-user
      serviceAccountName: drone-user
      securityContext:
        {}
      containers:
        - name: server
          securityContext:
            {}
          image: "harbor.local.segma.tech/drone/drone:1.6.2-20220530"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {}
          envFrom:
            - configMapRef:
                name: drone-server
          volumeMounts:
            # - name: drone-user
            #   mountPath: /var/run/secrets/kubernetes.io/serviceaccount/token
            - name: storage-volume
              mountPath: /data
              subPath: ""
      volumes:
        # - name: drone-user
        #   projected:
        #     sources:
        #     - serviceAccountToken:
        #         path: drone-user-token
        #         expirationSeconds: 7200
        #         audience: vault
        - name: storage-volume
          persistentVolumeClaim:
            claimName: drone-server
---
# Source: drone/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: drone-server
  labels:
    release: drone-server
    helm.sh/chart: drone-0.2.5
    app.kubernetes.io/name: drone
    app.kubernetes.io/instance: drone-server
    app.kubernetes.io/component: server
    app.kubernetes.io/version: "2.12"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: istio
spec:
  rules:
    - host: "drone.local.segma.tech"
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: drone-server
              port:
                number: 80
