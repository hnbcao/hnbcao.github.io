<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基础知识 on HNBCAO</title>
    <link>https://hnbcao.vip/docs/golang/basic/</link>
    <description>Recent content in 基础知识 on HNBCAO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-ch</language><atom:link href="https://hnbcao.vip/docs/golang/basic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>for 和 range</title>
      <link>https://hnbcao.vip/docs/golang/basic/for-and-range/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hnbcao.vip/docs/golang/basic/for-and-range/</guid>
      <description>for 和 range #  一、数组和切片 #  循环永动机：对于所有的 range 循环，Go 语言都会在编译期将原切片或者数组赋值给一个新变量 ha，在赋值的过程中就发生了拷贝，而我们又通过 len 关键字预先获取了切片的长度，所以在循环中追加新的元素也不会改变循环执行的次数，这也就解释了循环永动机一节提到的现象。
二、哈希表 #  首先会选出一个绿色的正常桶开始遍历，随后遍历所有黄色的溢出桶，最后依次按照索引顺序遍历哈希表中其他的桶，直到所有的桶都被遍历完成。
三、字符串 #  遍历字符串时拿到的值都是 rune 类型的变量，for i, r := range s {} 的结构都会被转换成如下所示的形式：
ha := s for hv1 := 0; hv1 &amp;lt; len(ha); { hv1t := hv1 hv2 := rune(ha[hv1]) if hv2 &amp;lt; utf8.RuneSelf { hv1++ } else { hv2, hv1 = decoderune(ha, hv1) } v1, v2 = hv1t, hv2 } 四、通道 #  使用 range 遍历 Channel 也是比较常见的做法，一个形如 for v := range ch {} 的语句最终会被转换成如下的格式：</description>
    </item>
    
    <item>
      <title>Select 关键字</title>
      <link>https://hnbcao.vip/docs/golang/basic/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hnbcao.vip/docs/golang/basic/select/</guid>
      <description>Select 关键字 #  一、实现原理 #    直接阻塞：空 select 语句；空的 select 语句会直接阻塞当前的 Goroutine，导致 Goroutine 进入无法被唤醒的永久休眠状态。
  单一管道：select 条件只包含一个 case；如果当前的 select 条件只包含一个 case，当 case 中的 Channel 是空指针时，就会直接挂起当前 Goroutine 并永久休眠。
  非阻塞操作：当 select 中仅包含两个 case，并且其中一个是 default 时，Go 语言的编译器就会认为这是一次非阻塞的收发操作。如果 select 控制结构中包含 default 语句，那么这个 select 语句在执行时会遇到以下两种情况：
1.当存在可以收发的 Channel 时，直接处理该 Channel 对应的 case；
2.当不存在可以收发的 Channel 是，执行 default 中的语句；
当我们运行下面的代码时就不会阻塞当前的 Goroutine，它会直接执行 default 中的代码并返回。
func main() { ch := make(chan int) select { case i := &amp;lt;-ch: println(i) default: println(&amp;#34;default&amp;#34;) } }   二、小结 #  我们简单总结一下 select 结构的执行过程与实现原理，首先在编译期间，Go 语言会对 select 语句进行优化，它会根据 select 中 case 的不同选择不同的优化路径：</description>
    </item>
    
  </channel>
</rss>
